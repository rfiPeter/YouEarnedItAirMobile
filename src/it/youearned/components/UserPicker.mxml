<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height.selecting="100%" height.selected="50" currentState="selecting" click="selectUser(event)" cacheAsBitmap="true">
	<fx:Script>
		<![CDATA[
			import it.youearned.api.services.valueObjects.BaseUserObject;
			import it.youearned.api.services.valueObjects.User;
			import it.youearned.model.AppModel;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			private var model:AppModel = AppModel.getInstance();
			
			
			[Bindable]
			private var selectedUserName:String = "";
			
			[Bindable]
			private var selectedUserPicture:String = "";
			
			
			
			private var _dataProvider:ArrayCollection;		
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}

			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider = value;
			}
			
			
			[Bindable]
			private var _selectedUser:User;
			public function get selectedUser():User
			{
				return _selectedUser;
			}

			public function set selectedUser(value:User):void
			{
				_selectedUser = value;
				
				if (value == null) {
					selectedUserName = "<blank>";
					return;
				}
				
				selectedUserName = _selectedUser.first_name + " " + _selectedUser.last_name;
				selectedUserPicture = _selectedUser.picture + "/small";
			}
			
			

			protected function onChange(event:TextOperationEvent):void
			{
				if (_dataProvider == null) return;
				if (userTI.text.length >= 2 && userTI.text != "  "){ 
					usersToPick.visible = true;
					usersToPick.dataProvider = _dataProvider;
					_dataProvider.filterFunction = filterThem;
					_dataProvider.refresh();
					
					if (_dataProvider.length == 0) {
						
						var b:BaseUserObject = new BaseUserObject();
						var u:User = new User();
						u.id = -1;
						u.first_name = "No Users";
						u.last_name = "Found";
						b.user = u;
						
						usersToPick.dataProvider = new ArrayList([b]);
						
					}					
				}
				else {
					usersToPick.visible = false;
					_dataProvider.filterFunction = null;
					_dataProvider.refresh();
				}
				
			}
			
			private function filterThem(obj:Object):Boolean
			{
				if (obj is BaseUserObject) {
					obj = obj.user;
				}
				else if (obj is User) {
					
				}
				
				if (obj.id == model.me.id)
					return false;
				
				var fName:String = obj.first_name;
				var lName:String = obj.last_name;
				var eName:String = obj.email;
				var wName:String = fName + " " + lName;
				
				if (wName.toLowerCase().indexOf(userTI.text.toLowerCase()) == 0)
					return true;
				else if (lName.toLowerCase().indexOf(userTI.text.toLowerCase()) == 0)
					return true;
				else if (eName.indexOf(userTI.text) == 0)
					return true;
				
				return false;
			}
			
			protected function onSelectUser(event:IndexChangeEvent):void
			{
				if (BaseUserObject(usersToPick.selectedItem).user.id == -1) {
					ready = false;
					return;
				}
				
				ready = true;
				
				selectedUser = BaseUserObject(usersToPick.selectedItem).user;
				currentState = "selected";
				
				dispatchEvent(new Event(Event.COMPLETE,false));
			}
			
			protected function selectUser(event:MouseEvent):void
			{
				if (currentState == "selecting")
					return;
				ready = false;
				currentState = "selecting";
				userTI.text = "";
			}
			
			
			public var ready:Boolean = false;
			
			public function clear():void
			{
				selectedUser = null;
				currentState = "selecting";
				userTI.text = "";
			}
			
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="complete", type="flash.events.Event")]
	</fx:Metadata>
	
	<s:states>
		<s:State name="selected" />
		<s:State name="selecting" enterState="userTI.setFocus()" />
	</s:states>
	
	
	<s:Rect width="100%" height="50">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xf1f1f1"/>
				<s:GradientEntry color="0xcccccc"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<s:Label left="10" top="19" text="To:"/>
	<s:TextInput id="userTI" left="43" right="10" top="10" change="onChange(event)" includeIn="selecting" autoCorrect="false" contentBackgroundColor="0xffffff"/>
	<s:Image includeIn="selected" left="43" top="11" width="31" height="31"
			 source="{LayoutImages.DefaultProfileIcon}" />
	<s:Image includeIn="selected" left="43" top="11" width="31" height="31"
			 source="{selectedUserPicture}"/>
	<s:Label includeIn="selected" left="85" top="19" text="{selectedUserName}"/>
	
	<s:List includeIn="selecting" top="50" bottom="0" width="100%" id="usersToPick" visible="false" itemRenderer="it.youearned.renderers.BasicUserItemRenderer" change="onSelectUser(event)"/>
</s:Group>
